// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"
	models "skillfactory/news_agregator/internal/models"

	gomock "github.com/golang/mock/gomock"
)

// MockFeeds is a mock of Feeds interface.
type MockFeeds struct {
	ctrl     *gomock.Controller
	recorder *MockFeedsMockRecorder
}

// MockFeedsMockRecorder is the mock recorder for MockFeeds.
type MockFeedsMockRecorder struct {
	mock *MockFeeds
}

// NewMockFeeds creates a new mock instance.
func NewMockFeeds(ctrl *gomock.Controller) *MockFeeds {
	mock := &MockFeeds{ctrl: ctrl}
	mock.recorder = &MockFeedsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeeds) EXPECT() *MockFeedsMockRecorder {
	return m.recorder
}

// Feeds mocks base method.
func (m *MockFeeds) Feeds(limit int) ([]models.Feeds, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Feeds", limit)
	ret0, _ := ret[0].([]models.Feeds)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Feeds indicates an expected call of Feeds.
func (mr *MockFeedsMockRecorder) Feeds(limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Feeds", reflect.TypeOf((*MockFeeds)(nil).Feeds), limit)
}

// StoreFeeds mocks base method.
func (m *MockFeeds) StoreFeeds(feeds []models.Feeds) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StoreFeeds", feeds)
	ret0, _ := ret[0].(error)
	return ret0
}

// StoreFeeds indicates an expected call of StoreFeeds.
func (mr *MockFeedsMockRecorder) StoreFeeds(feeds interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StoreFeeds", reflect.TypeOf((*MockFeeds)(nil).StoreFeeds), feeds)
}
